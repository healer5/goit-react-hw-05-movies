{"version":3,"file":"static/js/965.b9f5e14c.chunk.js","mappings":"wRAEaA,EAAiBC,EAAAA,EAAAA,GAAH,4RAChB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,GAAxB,IAEH,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IACC,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAIH,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAIbC,EAAWJ,EAAAA,EAAAA,EAAH,yIAGN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAET,SAAAF,GAAK,OAAIA,EAAMC,MAAMG,OAAOC,SAAvB,IAGHC,EAAcP,EAAAA,EAAAA,IAAH,uCACb,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,GAAxB,IAGHK,EAAaR,EAAAA,EAAAA,GAAH,8D,SCvBVS,EAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACtC,OACE,UAACb,EAAD,WACGW,GACC,SAACH,EAAD,CACEM,IAAG,6CAAwCH,GAC3CI,IAAKH,EACLI,MAAM,SAGR,SAAC,MAAD,CAAqBC,KAAK,WAE5B,SAACZ,EAAD,UAAWO,KACX,SAACP,EAAD,UAAWQ,MAGhB,E,SC+BDH,EAASQ,UAAY,CACnBP,MAAOQ,IAAAA,OACPP,KAAMO,IAAAA,OACNN,UAAWM,IAAAA,QAGb,MAhDa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAYH,GAASI,MAAK,SAAAC,GACpBA,IACFR,EAAQQ,EAASC,KAAKV,MACS,IAA5BS,EAASC,KAAKV,KAAKW,QACpBR,GAAU,GAIf,GACF,GAAE,CAACC,KAGF,gCACGJ,GACC,SAACZ,EAAD,UACGY,EAAKY,KAAI,SAAAC,GAAK,OACb,SAACxB,EAAD,CAEEC,MAAOuB,EAAMC,aACbvB,KAAMsB,EAAMtB,KACZC,UAAWqB,EAAMrB,WAHZqB,EAAME,GAFA,OAUjB,SAAC,IAAD,IAEDb,IACC,SAAClB,EAAD,yEAMP,C,6MC7CYgC,EAAY,8BACZC,EAAe,mCAItBC,EAAO,mCAAG,WAAMC,GAAN,gGAEWC,EAAAA,EAAAA,IAAUD,GAFrB,cAENV,EAFM,yBAGLA,GAHK,gCAKZY,EAAAA,GAAAA,MAAY,gDALA,yDAAH,sDASAC,EAAa,SAAAlB,GACxB,IAAMe,EAAG,UAAMH,EAAN,mBAA0BZ,EAA1B,4BAAqDa,EAArD,0BACT,OAAOC,EAAQC,EAChB,EAEYI,EAAkB,SAAAnB,GAC7B,IAAMe,EAAG,UAAMH,EAAN,mBAA0BZ,EAA1B,oBAA6Ca,EAA7C,0BACT,OAAOC,EAAQC,EAChB,EAEYK,EAAc,WACzB,IAAML,EAAG,UAAMH,EAAN,sCAA6CC,GACtD,OAAOC,EAAQC,EAChB,EAEYM,EAAY,SAAAC,GACvB,IAAMP,EAAG,UAAMH,EAAN,kCAAyCC,EAAzC,kBAA+DS,EAA/D,8CACT,OAAOR,EAAQC,EAChB,EAEYQ,EAAU,SAAAvB,GACrB,IAAMe,EAAG,UAAMH,EAAN,mBAA0BZ,EAA1B,4BAAqDa,EAArD,mBACT,OAAOC,EAAQC,EAChB,C","sources":["components/Cast/CastStyled.jsx","components/Cast/CastItem.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastStyledItem = styled.li`\n  width: ${props => props.theme.spacing(64)};\n  list-style: none;\n  padding: ${props => props.theme.spacing(2)};\n  border-radius: ${props => props.theme.spacing(1)};\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  :not(:last-child) {\n    margin-bottom: ${props => props.theme.spacing(2)};\n  }\n`;\n\nexport const CastText = styled.p`\n  font-family: Raleway, sans-serif;\n  font-weight: 500;\n  font-size: ${props => props.theme.spacing(3)};\n  line-height: 1.2;\n  color: ${props => props.theme.colors.textColor};\n`;\n\nexport const ActorsPhoto = styled.img`\n  width: ${props => props.theme.spacing(32)};\n`;\n\nexport const ActorsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n`;","import { HiOutlineEmojiHappy } from 'react-icons/hi';\nimport { CastStyledItem, CastText, ActorsPhoto } from './CastStyled';\n\nexport const CastItem = ({ photo, name, character }) => {\n  return (\n    <CastStyledItem>\n      {photo ? (\n        <ActorsPhoto\n          src={`https://image.tmdb.org/t/p/original${photo}`}\n          alt={name}\n          width=\"128\"\n        />\n      ) : (\n        <HiOutlineEmojiHappy size=\"128px\" />\n      )}\n      <CastText>{name}</CastText>\n      <CastText>{character}</CastText>\n    </CastStyledItem>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as API from '../../services/api';\nimport { CastItem } from './CastItem';\nimport { CastText,ActorsList } from './CastStyled';\nimport { Spinner } from '../AppStyled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [noData, setNoData] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    API.getCast(movieId).then(response => {\n      if (response) {\n        setCast(response.data.cast);\n        if(response.data.cast.length===0){\n          setNoData(true);}\n      } else {\n        return;\n      }\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {cast ? (\n        <ActorsList>\n          {cast.map(actor => (\n            <CastItem\n              key={actor.id}\n              photo={actor.profile_path}\n              name={actor.name}\n              character={actor.character}\n            />\n          ))}\n        </ActorsList>\n      ) : (\n        <Spinner />\n      )}\n      {noData && (\n        <CastText>\n          Sorry, we don't have any cast information for this movie\n        </CastText>\n      )}\n    </>\n  );\n};\n\nCastItem.propTypes = {\n  photo: PropTypes.string,\n  name: PropTypes.string,\n  character: PropTypes.string,\n};\n\nexport default Cast;","import axios from 'axios';\nimport toast from 'react-hot-toast';\n\nexport const BASIC_URL = 'https://api.themoviedb.org/';\nexport const PERSONAL_KEY = '59483ef1407ef779ba79a4ef6c1e5236'; //Ключ API (v3 auth)\nexport const PERSONAL_KEY_V4 =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YTczMjI4OWZhYWEwMjFiMzAwYzY3YzgwYzM1Y2FkMSIsInN1YiI6IjYyNmU1NzcyMjQ1ZGJlMzM3ZjQzNzgwOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nGXh-5GwT2pl8pJ7su6oK_01uD4EgHcGzKoNAn_Ubao';\n\nconst getData = async url => {\n  try {\n    const response = await axios.get(url);\n    return response;\n  } catch (error) {\n    toast.error('Sorry, We don`t have this film`s information');\n  }\n};\n\nexport const getReviews = movieId => {\n  const url = `${BASIC_URL}3/movie/${movieId}/reviews?api_key=${PERSONAL_KEY}&language=en-US&page=1`;\n  return getData(url);\n};\n\nexport const getMovieDetails = movieId => {\n  const url = `${BASIC_URL}3/movie/${movieId}?api_key=${PERSONAL_KEY}&language=en-US&page=1`;\n  return getData(url);\n};\n\nexport const getTranding = () => {\n  const url = `${BASIC_URL}3/trending/all/day?api_key=${PERSONAL_KEY}`;\n  return getData(url);\n};\n\nexport const getMovies = query => {\n  const url = `${BASIC_URL}3/search/movie?api_key=${PERSONAL_KEY}&query=${query}&language=en-US&page=1&include_adult=false`;\n  return getData(url);\n};\n\nexport const getCast = movieId => {\n  const url = `${BASIC_URL}3/movie/${movieId}/credits?api_key=${PERSONAL_KEY}&language=en-US`;\n  return getData(url);\n};\n"],"names":["CastStyledItem","styled","props","theme","spacing","CastText","colors","textColor","ActorsPhoto","ActorsList","CastItem","photo","name","character","src","alt","width","size","propTypes","PropTypes","useState","cast","setCast","noData","setNoData","movieId","useParams","useEffect","API","then","response","data","length","map","actor","profile_path","id","BASIC_URL","PERSONAL_KEY","getData","url","axios","toast","getReviews","getMovieDetails","getTranding","getMovies","query","getCast"],"sourceRoot":""}